type Query {
  roles(page: ListPage, filter: RoleFilter): RoleList! @auth
}

type Mutation {
  createRole(input: CreateRoleInput!): RolePayload! @auth
  updateRole(input: UpdateRoleInput!): RolePayload! @auth
  deleteRoles(ids: [ID!]!, reason: String): DeleteResponse! @auth
  attachPermissionsToRole(roleId: ID!, permissionIds: [ID!]!): RolePayload!
    @auth
  detachPermissionsFromRole(roleId: ID!, permissionIds: [ID!]!): RolePayload!
    @auth
  detachRoleFromAllUsers(roleId: ID!): RolePayload! @auth
}

type Role {
  id: ID!
  name: String!
  description: String
  permissions: [Permission]!
  members(page: ListPage, filter: UserFilter): UserList!
  createdAt: DateTime!
  updatedAt: DateTime
}

type RolePayload implements Response {
  code: ID!
  success: Boolean!
  message: String!
  role: Role
}

input CreateRoleInput {
  name: String!
  description: String
  permissionIds: [ID!]!
}

input UpdateRoleInput {
  id: ID!
  name: String
  description: String
}

# Pagination

type RoleList implements List {
  items: [Role]!
  totalCount: Int!
  pageInfo: PageInfo!
}

# Filter

input RoleFilter {
  id: IDFieldFilter
  name: StringFieldFilter
  createdAt: DateTimeFieldFilter
  updatedAt: DateTimeFieldFilter
}
