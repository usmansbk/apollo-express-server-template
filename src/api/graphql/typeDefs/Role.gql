type Query {
  getRoleById(id: ID!): RolePayload! @auth
  roles(page: ListPage, filter: RoleFilter): RoleList! @auth
}

type Mutation {
  createRole(input: CreateRoleInput!): RoleMutationResponse! @auth
  updateRole(input: UpdateRoleInput!): RoleMutationResponse! @auth
  deleteRoles(ids: [ID!]!, reason: String): BulkDeleteMutationResponse! @auth
  attachPermissionsToRole(
    roleId: ID!
    permissionIds: [ID!]!
  ): RoleMutationResponse! @auth
  detachPermissionsFromRole(
    roleId: ID!
    permissionIds: [ID!]!
  ): RoleMutationResponse! @auth
  detachRoleFromMembers(roleId: ID!): RoleMutationResponse! @auth
}

type Role {
  id: ID!
  name: String!
  description: String
  permissions: [Permission]!
  members(page: ListPage, where: UserAttributesWhere): UserList!
  createdAt: DateTime!
  updatedAt: DateTime
}

type RoleMutationResponse implements Response & FormErrors {
  code: ID!
  success: Boolean!
  message: String!
  role: Role
  errors: [FieldError!]
}

type RolePayload implements Response {
  code: ID!
  success: Boolean!
  message: String!
  role: Role
}

input CreateRoleInput {
  name: String!
  description: String
  permissionIds: [ID!]
}

input UpdateRoleInput {
  id: ID!
  name: String
  description: String
}

# Pagination

type RoleList implements List {
  items: [Role]!
  totalCount: Int!
  pageInfo: PageInfo!
}

# Filter

input RoleFilter {
  where: RoleAttributesWhere
  include: RoleAssociationInclude
}

input RoleAttributesWhere {
  id: IDFieldFilter
  name: StringFieldFilter
  createdAt: DateTimeFieldFilter
  updatedAt: DateTimeFieldFilter
  and: [RoleAttributesWhere!]
  or: [RoleAttributesWhere!]
}

input RoleAssociationInclude {
  permissions: PermissionFilter
  members: UserFilter
}
