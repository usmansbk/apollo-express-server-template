type Query {
  me: UserPayload! @auth
  getUserById(id: ID!): UserPayload! @auth

  # admin
  users(page: ListPage, filter: UserFilter): UserList!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
}

type Mutation {
  updateCurrentUserFullname(input: UpdateFullnameInput!): UserMutationResponse!
    @auth
  updateCurrentUserUsername(username: String!): UserMutationResponse! @auth
  updateCurrentUserLocale(locale: Locale!): UserMutationResponse! @auth
  removeCurrentUserAvatar: UserMutationResponse! @auth
  requestCurrentUserPhoneNumberVerification(
    phoneNumber: PhoneNumber!
  ): UserMutationResponse! @auth
  verifyPhoneNumber(token: String!): UserMutationResponse! @auth

  # Admin
  createUser(input: CreateUserInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserFullname(input: ChangeUserFullnameInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserUsername(input: ChangeUsernameInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserLocale(input: ChangeUserLocaleInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserEmail(input: ChangeUserEmailInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserPhoneNumber(
    input: ChangeUserPhoneNumberInput!
  ): UserMutationResponse! @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserPassword(input: ChangeUserPasswordInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  changeUserStatus(input: ChangeUserStatusInput!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  removeUserAvatar(id: ID!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  deleteUser(id: ID!, reason: String!): DeleteMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  attachRolesToUser(userId: ID!, roleIds: [ID!]!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  detachRolesFromUser(userId: ID!, roleIds: [ID!]!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
  detachAllRolesFromUser(userId: ID!): UserMutationResponse!
    @auth(rules: [{ allow: role, roles: ["admin"] }])
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  username: String
  email: EmailAddress!
    @auth(
      rules: [
        { allow: owner, identityClaim: "id" }
        { allow: role, roles: ["admin"] }
      ]
    )
  phoneNumber: PhoneNumber
    @auth(
      rules: [
        { allow: owner, identityClaim: "id" }
        { allow: role, roles: ["admin"] }
      ]
    )
  avatar: Photo
  socialAvatarURL: URL
  isOwner: Boolean!
  locale: Locale!
  emailVerified: Boolean!
  phoneNumberVerified: Boolean!
  roles: [Role]!
    @auth(
      rules: [
        { allow: owner, identityClaim: "id" }
        { allow: role, roles: ["admin"] }
      ]
    )
  createdAt: DateTime!
  updatedAt: DateTime
  passwordResetAt: DateTime
    @auth(
      rules: [
        { allow: owner, identityClaim: "id" }
        { allow: role, roles: ["admin"] }
      ]
    )
  status: AccountStatus!
    @auth(
      rules: [
        { allow: owner, identityClaim: "id" }
        { allow: role, roles: ["admin"] }
      ]
    )
}

type UserList implements List {
  items: [User]!
  totalCount: Int!
  pageInfo: PageInfo!
}

enum AccountStatus {
  SUSPENDED
  BANNED
  LOCKED
  PROVISIONED
  ACTIVE
}

type UserPayload implements Response {
  code: ID!
  success: Boolean!
  message: String!
  user: User
}

type UserMutationResponse implements Response & FormErrors {
  code: ID!
  success: Boolean!
  message: String!
  errors: [FieldError!]
  user: User
}

# Inputs

input CreateUserInput {
  firstName: String!
  lastName: String!
  username: String
  email: EmailAddress!
  password: String!
  phoneNumber: PhoneNumber
  locale: Locale
}

input UpdateFullnameInput {
  firstName: String!
  lastName: String!
}

input ChangeUserFullnameInput {
  id: ID!
  firstName: String!
  lastName: String!
}

input ChangeUsernameInput {
  id: ID!
  username: String!
}

input ChangeUserEmailInput {
  id: ID!
  email: EmailAddress!
}

input ChangeUserPasswordInput {
  id: ID!
  password: String!
}

input ChangeUserStatusInput {
  id: ID!
  status: AccountStatus!
  reason: String
}

input ChangeUserLocaleInput {
  id: ID!
  locale: Locale!
}

input ChangeUserPhoneNumberInput {
  id: ID!
  phoneNumber: PhoneNumber!
}

input UserFilter {
  where: UserAttributesWhere
  include: UserAssociationInclude
}

input UserAttributesWhere {
  id: IDFieldFilter
  firstName: StringFieldFilter
  lastName: StringFieldFilter
  username: StringFieldFilter
  email: StringFieldFilter
  phoneNumber: StringFieldFilter
  emailVerified: BooleanFieldFilter
  phoneNumberVerified: BooleanFieldFilter
  locale: StringFieldFilter
  status: StringFieldFilter
  createdAt: DateTimeFieldFilter
  updatedAt: DateTimeFieldFilter
  and: [UserAttributesWhere!]
  or: [UserAttributesWhere!]
}

input UserAssociationInclude {
  roles: RoleFilter
}
