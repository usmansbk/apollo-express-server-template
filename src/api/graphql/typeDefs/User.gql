type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  phoneNumber: String
  picture(resize: ImageResizeInput): String
  "This profile belongs to loogged in user?"
  isOwner: Boolean!
  language: String!
  emailVerified: Boolean!
  phoneNumberVerified: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phoneNumber: String
  language: String
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  phoneNumber: String
  language: String
}

type Query {
  me: UserPayload! @auth
}

type Mutation {
  requestEmailVerification: RequestResponse! @auth
  requestPhoneNumberVerification(phoneNumber: String!): RequestResponse! @auth
  verifyEmail(token: String!): UserPayload!
  verifyPhoneNumber(token: String!): UserPayload! @auth
  updateProfile(input: UpdateProfileInput!): UserFormMutationResponse! @auth
  removeProfilePicture: UserPayload! @auth
}

type UserPayload implements Response {
  code: Int!
  success: Boolean!
  message: String!
  user: User
}

type UserFormMutationResponse implements Response & FormErrors {
  code: Int!
  success: Boolean!
  message: String!
  errors: [FieldError!]
  user: User
}