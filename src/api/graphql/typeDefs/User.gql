type Query {
  me: UserPayload! @auth
  getUserById(id: ID!): UserPayload! @auth
  users(page: ListPage, filter: UserFilter): UserList! @auth
}

type Mutation {
  updateCurrentUserFullname(input: UpdateFullnameInput!): UserPayload! @auth
  updateCurrentUserName(username: String!): UserPayload! @auth
  updateCurrentUserLocale(locale: Locale!): UserPayload! @auth
  removeCurrentUserProfilePicture: UserPayload! @auth
  requestCurrentUserPhoneNumberVerification(
    phoneNumber: PhoneNumber!
  ): UserPayload! @auth
  requestEmailVerification: RequestResponse! @auth
  verifyEmail(token: String!): UserPayload!
  verifyPhoneNumber(token: String!): UserPayload! @auth

  # Admin
  createUserAccounts(input: CreateUserAccountsInput!): [User!]! @auth
  updateUserProfile(input: UpdateUserProfileInput!): User! @auth
  deleteUserAccounts(ids: [ID!]!): [ID!]! @auth
  attachRolesToUser(userId: ID!, roleIds: [ID!]!): User! @auth
  detachRolesFromUser(userId: ID!, roleIds: [ID!]!): User! @auth
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  username: String
  email: EmailAddress! @auth(rules: [{ allow: owner, identityClaim: "id" }])
  phoneNumber: PhoneNumber @auth(rules: [{ allow: owner, identityClaim: "id" }])
  picture: Photo
  socialAvatarURL: URL
  isOwner: Boolean!
  locale: Locale!
  emailVerified: Boolean!
  phoneNumberVerified: Boolean!
  roles: [Role]!
  createdAt: DateTime!
  updatedAt: DateTime
  status: AccountStatus! @auth(rules: [{ allow: owner, identityClaim: "id" }])
}

enum AccountStatus {
  SUSPENDED
  BANNED
  DEACTIVATED
  RECOVERY
  LOCKED
  PROVISIONED
}

type UserPayload implements Response {
  code: ID!
  success: Boolean!
  message: String!
  user: User
}

# Inputs

input CreateAccountInput {
  firstName: String!
  lastName: String!
  username: String
  email: EmailAddress!
  password: String!
  phoneNumber: PhoneNumber
  locale: Locale
}

input CreateUserProfileInput {
  firstName: String!
  lastName: String!
  email: EmailAddress!
  phoneNumber: PhoneNumber
  locale: Locale
}

input CreateUserAccountsInput {
  profiles: [CreateUserProfileInput!]!
  roleIds: [ID!]!
}

input UpdateUserProfileInput {
  id: ID!
  firstName: String
  lastName: String
  username: String
  email: EmailAddress
  phoneNumber: PhoneNumber
  locale: Locale
}

input UpdateFullnameInput {
  firstName: String
  lastName: String
}

# Pagination

type UserList implements List {
  items: [User]!
  totalCount: Int!
  pageInfo: PageInfo!
}

# Filter

input UserFilter {
  id: IDFieldFilter
  firstName: StringFieldFilter
  lastName: StringFieldFilter
  username: StringFieldFilter
  email: StringFieldFilter
  phoneNumber: StringFieldFilter
  locale: StringFieldFilter
  createdAt: DateTimeFieldFilter
  updatedAt: DateTimeFieldFilter
  roles: RoleFilter
}
