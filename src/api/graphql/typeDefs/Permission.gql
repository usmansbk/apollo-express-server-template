type Query {
  permissions(page: ListPage, filter: PermissionFilter): PermissionList! @auth
}

type Mutation {
  createPermissions(inputs: [CreatePermissionInput!]!): [Permission!]! @auth
  updatePermission(input: UpdatePermissionInput!): Permission! @auth
  deletePermissions(ids: [ID!]!): [ID!]! @auth
  detachPermissionFromAllRoles(permissionId: ID!): Permission! @auth
}

type Permission {
  id: ID!
  name: String!
  action: PermissionAction!
  resource: PermissionResource!
  description: String
  roles(page: ListPage, filter: RoleFilter): RoleList!
  createdAt: DateTime!
  updatedAt: DateTime
}

input CreatePermissionInput {
  name: String!
  action: PermissionAction!
  resource: PermissionResource!
  description: String
}

input UpdatePermissionInput {
  id: ID!
  name: String
  action: PermissionAction
  resource: PermissionResource
  description: String
}

enum PermissionResource {
  users
  roles
  permissions
  all
}

enum PermissionAction {
  all
  create
  read
  update
  delete
  list
}

# Pagination

type PermissionList implements List {
  items: [Permission]!
  totalCount: Int!
  pageInfo: PageInfo!
}

# Filter

input PermissionFilter {
  id: IDFieldFilter
  name: StringFieldFilter
  action: StringFieldFilter
  resource: StringFieldFilter
  createdAt: DateTimeFieldFilter
  updatedAt: DateTimeFieldFilter
}
