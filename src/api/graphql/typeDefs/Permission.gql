type Query {
  permissions(page: ListPage): PermissionList! @auth
}

type Mutation {
  createPermissions(input: [CreatePermissionInput!]!): [Permission!]! @auth
  updatePermissions(input: [UpdatePermissionInput!]!): [Permission!]! @auth
  deletePermissions(ids: [ID!]!): [ID!]! @auth
  detachPermissionFromAllRoles(permissionId: ID!): Permission! @auth
}

type Permission {
  id: ID!
  name: String!
  action: PermissionAction!
  resource: PermissionResource!
  description: String
  roles: [Role]!
  createdAt: DateTime!
  updatedAt: DateTime
}

input CreatePermissionInput {
  name: String!
  action: PermissionAction!
  resource: PermissionResource!
  description: String
}

input UpdatePermissionInput {
  id: ID!
  name: String
  action: PermissionAction
  resource: PermissionResource
  description: String
}

type PermissionList implements List {
  items: [Permission]!
  totalCount: Int!
  pageInfo: PageInfo!
}

enum PermissionResource {
  users
  roles
  permissions
}

enum PermissionAction {
  create
  read
  update
  delete
}
